//
//  OnBoardingScannerViewController.swift
//  Pods
//
//  Created by NB1003917 on 28/2/2567 BE.
//  Copyright (c) 2567 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import BSImagePicker

public protocol OnBoardingScannerViewControllerDelegate: AnyObject {
    func didReceiveOnBoardingScannerResult(_ string: String)
}

protocol OnBoardingScannerDisplayLogic: class {
    func displaySomething(viewModel: OnBoardingScanner.Something.ViewModel)
}

open class OnBoardingScannerViewController: UIViewController, OnBoardingScannerDisplayLogic {
    var interactor: OnBoardingScannerBusinessLogic?
    var router: (NSObjectProtocol & OnBoardingScannerRoutingLogic & OnBoardingScannerDataPassing)?
    
    public weak var delegate: OnBoardingScannerViewControllerDelegate?
    
    private var paginationView: PaginationView?
    private let buttonStackView = UIStackView()
    var loadView = LoaderView()
    private var qrCodeView: QRCodeView?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required public init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = OnBoardingScannerInteractor()
        let presenter = OnBoardingScannerPresenter()
        let router = OnBoardingScannerRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
        
        let lang: BSImagePicker.Language = OnBoardingScannerInstance.shared.language == .th ? .th : .en
        BSImagePickerInstance.shared.setLanguage(lang)
        modalPresentationStyle = .fullScreen
    }
    
    // MARK: Routing
    
    open override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    override public func viewDidLoad() {
        super.viewDidLoad()
        setUpViews()
    }
    
    public override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.navigationController?.navigationBar.isHidden = true
        startScanning()
    }
    
    public override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        self.navigationController?.navigationBar.isHidden = false
    }
    
    func displaySomething(viewModel: OnBoardingScanner.Something.ViewModel) {
        //nameTextField.text = viewModel.name
    }
    
    private func startScanning() {
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.3) { [unowned self] in
            self.qrCodeView?.qrScanner?.startScanning()
        }
    }
    
    private func stopScanning() {
        qrCodeView?.qrScanner?.stopScanning()
    }
}

private extension OnBoardingScannerViewController {
    
    func setUpViews() {
        let request = OnBoardingScanner.Something.Request()
        interactor?.doSomething(request: request)
        
        view.backgroundColor = .white
        buttonStackView.axis = .vertical
        buttonStackView.spacing = 20.0
        qrCodeView = QRCodeView(delegate: self)
        
        setUpPagination()
        
        loadView.startLoading()
    }
    
    func setUpPagination() {
        var paginations: [PaginationViewModel] = []        
        let codeInputView = CodeInputView()
        codeInputView.delegate = self
        
        guard let qrCodeView else { return }
        qrCodeView.backgroundColor = .white
        
        paginations.append(
            PaginationViewModel(
                menu: .init(title: "qr_code_title".localized(), icon: nil),
                view: qrCodeView
            )
        )
        
        paginations.append(
            PaginationViewModel(
                menu: .init(title: "code_invitation_title".localized(), icon: nil),
                view: codeInputView
            )
        )
        
        paginationView = PaginationView(models: paginations)
        paginationView?.delegate = self
        view.backgroundColor = .whiteSmokeColor
        
        guard let paginationView else { return }
        view.addSubviews(loadView, paginationView)
        loadView.snp.makeConstraints {
            $0.size.equalTo(50.0)
            $0.center.equalToSuperview()
        }
        
        paginationView.snp.makeConstraints {
            $0.horizontalEdges.equalToSuperview()
            $0.top.equalTo(view.safeAreaInsets.bottom).offset(44.0)
            $0.bottom.equalTo(view.safeAreaInsets.bottom).inset(10.0)
        }
    }
    
    private func gotoAppPrivacySettings() {
        guard let url = URL(string: UIApplication.openSettingsURLString),
              UIApplication.shared.canOpenURL(url) else {
            assertionFailure("Not able to open App privacy settings")
            return
        }
        UIApplication.shared.open(url, options: [:], completionHandler: nil)
    }
}
// MARK: - Private
private extension OnBoardingScannerViewController {
    func openImageGallery() {
        stopScanning()
        let imagePicker = ImagePickerController()
        imagePicker.settings.selection.max = 1
        imagePicker.settings.theme.selectionStyle = .numbered
        imagePicker.settings.fetch.assets.supportedMediaTypes = [.image]
        imagePicker.settings.selection.unselectOnReachingMax = true
        let start = Date()
        self.presentImagePicker(imagePicker, select: { (asset) in
            print("Selected: \(asset)")
        }, deselect: { (asset) in
            print("Deselected: \(asset)")
        }, cancel: { (assets) in
            print("Canceled with selections: \(assets)")
        }, finish: { [weak self] (assets) in
            guard let self = self, let asset = assets.first else { return }
            Helper.shared.convertAssetToImage(asset: asset) { image in
                guard let image else { return }
                let code = Helper.shared.string(from: image)
                self.didReceiveOnBoardingScannerResult(code)
            }
        }, completion: {
            let finish = Date()
            print(finish.timeIntervalSince(start))
        })
    }
    
    func didReceiveOnBoardingScannerResult(_ string: String) {
        print("LLOG: didReceiveOnBoardingScannerResult", string)
        DispatchQueue.main.async { [weak self] in
            guard let self else { return }
            self.dismiss(animated: true) { [weak self] in
                guard let self else { return }
                self.delegate?.didReceiveOnBoardingScannerResult(string)
            }
        }

    }
}

extension OnBoardingScannerViewController: QRCodeViewDelegate {
    
    func qrScanningDidFail() {
        print("LLOG: qrScanningDidFail")
    }
    
    func qrScanningSucceededWithCode(_ string: String?) {
        guard let string else {
            qrScanningDidFail()
            return
        }
        didReceiveOnBoardingScannerResult(string)
    }
    
    func qrScanningDidStop() {}
    
    func qrScanningFailed(title: String, message: String) {}
    
    func qrScaningPresentAlert() {
//        let bundle = Bundle(for: type(of: self))
//        let lang = Settings.shared.language
        let title = "alert_camera_title".localized()
        let message = "alert_camera_message".localized()
        let alert = UIAlertController(title: title,
                                      message: message,
                                      preferredStyle: .alert)
        
        let notNowAction = UIAlertAction(title: "alert_not_now".localized(),
                                         style: .cancel,
                                         handler: nil)
        alert.addAction(notNowAction)
        
        let openSettingsAction = UIAlertAction(title: "alert_open_settings".localized(),
                                               style: .default) { [unowned self] (_) in
            // Open app privacy settings
            gotoAppPrivacySettings()
        }
        alert.addAction(openSettingsAction)
        DispatchQueue.main.async {
            self.present(alert, animated: true, completion: nil)
        }
    }
    
    func qrDidPickerImage() {
        openImageGallery()
    }
}

extension OnBoardingScannerViewController: PaginationViewDelegate {
    
    func paginationDidSelected(_ index: Int) {
        // MARK: - Index = camera scanner
//        if index == 0 {
//            startScanning()
//        } else {
//            stopScanning()
//        }
//        self.view.endEditing(true)
    }
}

extension OnBoardingScannerViewController: CodeInputViewDelegate {

    func didSubmitted(_ string: String) {
         dismiss(animated: true)
    }
    
    func endEditing() {
        view.endEditing(true)
    }
}
